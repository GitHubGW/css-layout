// 해당 파일을 여기서 사용하기 위해서는 import해야 한다. (import해올 때 뒤에 .scss 파일 확장자명은 빼줘야 한다.)
// _variables.scss와 _mixins.scss파일을 사용하기 위해 import해왔다.
@import "_variables";
@import "_mixin";
@import "_extend.scss";

// 여기 scss파일에서 작성한 내용들은 gulp가 컴파일을 해줘서 일반 css로 바꿔서 사용되게 된다.
// scss로 작업할 때는 console.log(터미널)를 키고 하는 것이 좋다. (이유는 gulp가 작업하면서 발생하는 에러를 실시간으로 알려주기 때문이다.)
body {
  background-color: $bg;
}

h1 {
  color: $color;
  // font-size: $titleSize;
}

// SCSS에는 Nesting이라는 개념이 있는데 이것은 코드를 좀 더 명시적으로 만드는 것이다.
// 아래와 같이 box밑의 자식 h1, button은 같은 { }안에 넣고 :hover같은 가상 클래스를 줄 때는 &를 통해 중복(.box)을 피해서 줄 수 있다.
.box {
  margin-top: 20px;

  &:hover {
    color: orange;
  }
  h1 {
    color: blue;
  }
  button {
    color: red;
  }
}

h2 {
  // _mixins.scss에서 만든 handleTitle 믹스인을 사용하기 위해서는 @include 명령어를 통해 가져와야 한다.
  // handleTitle이라는 mixin은 일종의 함수와 같기 때문에 뒤에 handleTitle()에 ()괄호를 통해 인자를 전달할 수 있다.
  // 만약 handleTitle 믹스인이 파라미터를 가지고 있다고 설정해줬는데 만약 여기서 인자값을 넘기지 않고 빈 값을 넘기면 오류가 뜬다.
  // @include handleTitle();

  font-style: italic;

  /*
  &:nth-child(odd){
    @include handleTitle(red);
  }
  &:nth-child(even){
    @include handleTitle(green);
  }
  */

  // :nth-child()를 주게 되면 우선순위 문제 때문인지 먹지 않아서 nth-of-type을 이용했다.
  /*
  &:nth-of-type(1){
    @include handleTitle(red);
  }
  &:nth-of-type(2){
    @include handleTitle(blue);
  }
  &:nth-of-type(3){
    @include handleTitle(green);
  }
  &:nth-of-type(4){
    @include handleTitle(black);
  }
  */

  &:nth-of-type(odd) {
    @include handleTitle2("odd");
  }
  &:nth-of-type(even) {
    @include handleTitle2("even");
  }
}

button {
  // _extend.scss에서 만든 %button을 가져와서 @extend 해주면 해당 코드의 내용들을 가져와서 재사용할 수 있게 된다.
  @extend %button;
}
button:nth-of-type(1) {
  @extend %button;
  color: red;
}
button:nth-of-type(2) {
  color: blue;
}

p {
  @extend %p;
  color: darkred;
}

// a{
//   @include responsive {
//     text-decoration: none;
//   };
// }

h3 {
  color: red;
  @include responsive("iphone") {
    color: yellow;
  }
}
